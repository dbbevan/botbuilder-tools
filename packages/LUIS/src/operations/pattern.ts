/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/patternMappers";
import * as Parameters from "../models/parameters";
import { LuisAuthoringContext } from "../luisAuthoringContext";

/** Class representing a Pattern. */
export class Pattern {
  private readonly client: LuisAuthoringContext;

  /**
   * Create a Pattern.
   * @param {LuisAuthoringContext} client Reference to the service client.
   */
  constructor(client: LuisAuthoringContext) {
    this.client = client;
  }

  /**
   * @summary Adds one pattern to the specified application.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {PatternRuleCreateObject} pattern The input pattern.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  addPatternWithHttpOperationResponse(azureRegion: Models.AzureRegions, appId: string, versionId: string, pattern: Models.PatternRuleCreateObject, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.PatternRuleInfo>> {
    return this.client.sendOperationRequest(
      {
        azureRegion,
        appId,
        versionId,
        pattern,
        options
      },
      addPatternOperationSpec);
  }

  /**
   * @summary Returns an application version's patterns.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {PatternGetPatternsOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getPatternsWithHttpOperationResponse(azureRegion: Models.AzureRegions, appId: string, versionId: string, options?: Models.PatternGetPatternsOptionalParams): Promise<msRest.HttpOperationResponse<Models.PatternRuleInfo[]>> {
    return this.client.sendOperationRequest(
      {
        azureRegion,
        appId,
        versionId,
        options
      },
      getPatternsOperationSpec);
  }

  /**
   * @summary Updates patterns
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {PatternRuleUpdateObject[]} patterns An array represents the patterns.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  updatePatternsWithHttpOperationResponse(azureRegion: Models.AzureRegions, appId: string, versionId: string, patterns: Models.PatternRuleUpdateObject[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.PatternRuleInfo[]>> {
    return this.client.sendOperationRequest(
      {
        azureRegion,
        appId,
        versionId,
        patterns,
        options
      },
      updatePatternsOperationSpec);
  }

  /**
   * @summary Adds a batch of patterns to the specified application.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {PatternRuleCreateObject[]} patterns A JSON array containing patterns.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  batchAddPatternsWithHttpOperationResponse(azureRegion: Models.AzureRegions, appId: string, versionId: string, patterns: Models.PatternRuleCreateObject[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.PatternRuleInfo[]>> {
    return this.client.sendOperationRequest(
      {
        azureRegion,
        appId,
        versionId,
        patterns,
        options
      },
      batchAddPatternsOperationSpec);
  }

  /**
   * @summary Deletes the patterns with the specified IDs.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {string[]} patternIds The patterns IDs.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  deletePatternsWithHttpOperationResponse(azureRegion: Models.AzureRegions, appId: string, versionId: string, patternIds: string[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.OperationStatus>> {
    return this.client.sendOperationRequest(
      {
        azureRegion,
        appId,
        versionId,
        patternIds,
        options
      },
      deletePatternsOperationSpec);
  }

  /**
   * @summary Updates a pattern
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {string} patternId The pattern ID.
   *
   * @param {PatternRuleUpdateObject} pattern An object representing a pattern.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  updatePatternWithHttpOperationResponse(azureRegion: Models.AzureRegions, appId: string, versionId: string, patternId: string, pattern: Models.PatternRuleUpdateObject, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.PatternRuleInfo>> {
    return this.client.sendOperationRequest(
      {
        azureRegion,
        appId,
        versionId,
        patternId,
        pattern,
        options
      },
      updatePatternOperationSpec);
  }

  /**
   * @summary Deletes the pattern with the specified ID.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {string} patternId The pattern ID.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  deletePatternWithHttpOperationResponse(azureRegion: Models.AzureRegions, appId: string, versionId: string, patternId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.OperationStatus>> {
    return this.client.sendOperationRequest(
      {
        azureRegion,
        appId,
        versionId,
        patternId,
        options
      },
      deletePatternOperationSpec);
  }

  /**
   * @summary Returns patterns to be retrieved for the specific intent.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {string} intentId The intent classifier ID.
   *
   * @param {PatternGetIntentPatternsOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getIntentPatternsWithHttpOperationResponse(azureRegion: Models.AzureRegions, appId: string, versionId: string, intentId: string, options?: Models.PatternGetIntentPatternsOptionalParams): Promise<msRest.HttpOperationResponse<Models.PatternRuleInfo[]>> {
    return this.client.sendOperationRequest(
      {
        azureRegion,
        appId,
        versionId,
        intentId,
        options
      },
      getIntentPatternsOperationSpec);
  }

  /**
   * @summary Adds one pattern to the specified application.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {PatternRuleCreateObject} pattern The input pattern.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.PatternRuleInfo} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.PatternRuleInfo} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  addPattern(azureRegion: Models.AzureRegions, appId: string, versionId: string, pattern: Models.PatternRuleCreateObject): Promise<Models.PatternRuleInfo>;
  addPattern(azureRegion: Models.AzureRegions, appId: string, versionId: string, pattern: Models.PatternRuleCreateObject, options: msRest.RequestOptionsBase): Promise<Models.PatternRuleInfo>;
  addPattern(azureRegion: Models.AzureRegions, appId: string, versionId: string, pattern: Models.PatternRuleCreateObject, callback: msRest.ServiceCallback<Models.PatternRuleInfo>): void;
  addPattern(azureRegion: Models.AzureRegions, appId: string, versionId: string, pattern: Models.PatternRuleCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PatternRuleInfo>): void;
  addPattern(azureRegion: Models.AzureRegions, appId: string, versionId: string, pattern: Models.PatternRuleCreateObject, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.PatternRuleInfo>): any {
    return msRest.responseToBody(this.addPatternWithHttpOperationResponse.bind(this), azureRegion, appId, versionId, pattern, options, callback);
  }

  /**
   * @summary Returns an application version's patterns.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {PatternGetPatternsOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.PatternRuleInfo[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getPatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string): Promise<Models.PatternRuleInfo[]>;
  getPatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string, options: Models.PatternGetPatternsOptionalParams): Promise<Models.PatternRuleInfo[]>;
  getPatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string, callback: msRest.ServiceCallback<Models.PatternRuleInfo[]>): void;
  getPatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string, options: Models.PatternGetPatternsOptionalParams, callback: msRest.ServiceCallback<Models.PatternRuleInfo[]>): void;
  getPatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string, options?: Models.PatternGetPatternsOptionalParams, callback?: msRest.ServiceCallback<Models.PatternRuleInfo[]>): any {
    return msRest.responseToBody(this.getPatternsWithHttpOperationResponse.bind(this), azureRegion, appId, versionId, options, callback);
  }

  /**
   * @summary Updates patterns
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {PatternRuleUpdateObject[]} patterns An array represents the patterns.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.PatternRuleInfo[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  updatePatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string, patterns: Models.PatternRuleUpdateObject[]): Promise<Models.PatternRuleInfo[]>;
  updatePatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string, patterns: Models.PatternRuleUpdateObject[], options: msRest.RequestOptionsBase): Promise<Models.PatternRuleInfo[]>;
  updatePatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string, patterns: Models.PatternRuleUpdateObject[], callback: msRest.ServiceCallback<Models.PatternRuleInfo[]>): void;
  updatePatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string, patterns: Models.PatternRuleUpdateObject[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PatternRuleInfo[]>): void;
  updatePatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string, patterns: Models.PatternRuleUpdateObject[], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.PatternRuleInfo[]>): any {
    return msRest.responseToBody(this.updatePatternsWithHttpOperationResponse.bind(this), azureRegion, appId, versionId, patterns, options, callback);
  }

  /**
   * @summary Adds a batch of patterns to the specified application.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {PatternRuleCreateObject[]} patterns A JSON array containing patterns.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.PatternRuleInfo[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  batchAddPatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string, patterns: Models.PatternRuleCreateObject[]): Promise<Models.PatternRuleInfo[]>;
  batchAddPatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string, patterns: Models.PatternRuleCreateObject[], options: msRest.RequestOptionsBase): Promise<Models.PatternRuleInfo[]>;
  batchAddPatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string, patterns: Models.PatternRuleCreateObject[], callback: msRest.ServiceCallback<Models.PatternRuleInfo[]>): void;
  batchAddPatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string, patterns: Models.PatternRuleCreateObject[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PatternRuleInfo[]>): void;
  batchAddPatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string, patterns: Models.PatternRuleCreateObject[], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.PatternRuleInfo[]>): any {
    return msRest.responseToBody(this.batchAddPatternsWithHttpOperationResponse.bind(this), azureRegion, appId, versionId, patterns, options, callback);
  }

  /**
   * @summary Deletes the patterns with the specified IDs.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {string[]} patternIds The patterns IDs.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.OperationStatus} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.OperationStatus} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deletePatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string, patternIds: string[]): Promise<Models.OperationStatus>;
  deletePatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string, patternIds: string[], options: msRest.RequestOptionsBase): Promise<Models.OperationStatus>;
  deletePatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string, patternIds: string[], callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deletePatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string, patternIds: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deletePatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string, patternIds: string[], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.OperationStatus>): any {
    return msRest.responseToBody(this.deletePatternsWithHttpOperationResponse.bind(this), azureRegion, appId, versionId, patternIds, options, callback);
  }

  /**
   * @summary Updates a pattern
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {string} patternId The pattern ID.
   *
   * @param {PatternRuleUpdateObject} pattern An object representing a pattern.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.PatternRuleInfo} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.PatternRuleInfo} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  updatePattern(azureRegion: Models.AzureRegions, appId: string, versionId: string, patternId: string, pattern: Models.PatternRuleUpdateObject): Promise<Models.PatternRuleInfo>;
  updatePattern(azureRegion: Models.AzureRegions, appId: string, versionId: string, patternId: string, pattern: Models.PatternRuleUpdateObject, options: msRest.RequestOptionsBase): Promise<Models.PatternRuleInfo>;
  updatePattern(azureRegion: Models.AzureRegions, appId: string, versionId: string, patternId: string, pattern: Models.PatternRuleUpdateObject, callback: msRest.ServiceCallback<Models.PatternRuleInfo>): void;
  updatePattern(azureRegion: Models.AzureRegions, appId: string, versionId: string, patternId: string, pattern: Models.PatternRuleUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PatternRuleInfo>): void;
  updatePattern(azureRegion: Models.AzureRegions, appId: string, versionId: string, patternId: string, pattern: Models.PatternRuleUpdateObject, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.PatternRuleInfo>): any {
    return msRest.responseToBody(this.updatePatternWithHttpOperationResponse.bind(this), azureRegion, appId, versionId, patternId, pattern, options, callback);
  }

  /**
   * @summary Deletes the pattern with the specified ID.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {string} patternId The pattern ID.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.OperationStatus} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.OperationStatus} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deletePattern(azureRegion: Models.AzureRegions, appId: string, versionId: string, patternId: string): Promise<Models.OperationStatus>;
  deletePattern(azureRegion: Models.AzureRegions, appId: string, versionId: string, patternId: string, options: msRest.RequestOptionsBase): Promise<Models.OperationStatus>;
  deletePattern(azureRegion: Models.AzureRegions, appId: string, versionId: string, patternId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deletePattern(azureRegion: Models.AzureRegions, appId: string, versionId: string, patternId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deletePattern(azureRegion: Models.AzureRegions, appId: string, versionId: string, patternId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.OperationStatus>): any {
    return msRest.responseToBody(this.deletePatternWithHttpOperationResponse.bind(this), azureRegion, appId, versionId, patternId, options, callback);
  }

  /**
   * @summary Returns patterns to be retrieved for the specific intent.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {string} intentId The intent classifier ID.
   *
   * @param {PatternGetIntentPatternsOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.PatternRuleInfo[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getIntentPatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string, intentId: string): Promise<Models.PatternRuleInfo[]>;
  getIntentPatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string, intentId: string, options: Models.PatternGetIntentPatternsOptionalParams): Promise<Models.PatternRuleInfo[]>;
  getIntentPatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string, intentId: string, callback: msRest.ServiceCallback<Models.PatternRuleInfo[]>): void;
  getIntentPatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string, intentId: string, options: Models.PatternGetIntentPatternsOptionalParams, callback: msRest.ServiceCallback<Models.PatternRuleInfo[]>): void;
  getIntentPatterns(azureRegion: Models.AzureRegions, appId: string, versionId: string, intentId: string, options?: Models.PatternGetIntentPatternsOptionalParams, callback?: msRest.ServiceCallback<Models.PatternRuleInfo[]>): any {
    return msRest.responseToBody(this.getIntentPatternsWithHttpOperationResponse.bind(this), azureRegion, appId, versionId, intentId, options, callback);
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const addPatternOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "luis/api/v2.0/apps/{appId}/versions/{versionId}/patternrule",
  urlParameters: [
    Parameters.azureRegion,
    Parameters.appId,
    Parameters.versionId0
  ],
  requestBody: {
    parameterPath: "pattern",
    mapper: {
      ...Mappers.PatternRuleCreateObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.PatternRuleInfo
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getPatternsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "luis/api/v2.0/apps/{appId}/versions/{versionId}/patternrules",
  urlParameters: [
    Parameters.azureRegion,
    Parameters.appId,
    Parameters.versionId0
  ],
  queryParameters: [
    Parameters.skip,
    Parameters.take
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PatternRuleInfo"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updatePatternsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "luis/api/v2.0/apps/{appId}/versions/{versionId}/patternrules",
  urlParameters: [
    Parameters.azureRegion,
    Parameters.appId,
    Parameters.versionId0
  ],
  requestBody: {
    parameterPath: "patterns",
    mapper: {
      required: true,
      serializedName: "patterns",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "PatternRuleUpdateObject"
          }
        }
      }
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PatternRuleInfo"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const batchAddPatternsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "luis/api/v2.0/apps/{appId}/versions/{versionId}/patternrules",
  urlParameters: [
    Parameters.azureRegion,
    Parameters.appId,
    Parameters.versionId0
  ],
  requestBody: {
    parameterPath: "patterns",
    mapper: {
      required: true,
      serializedName: "patterns",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "PatternRuleCreateObject"
          }
        }
      }
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PatternRuleInfo"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deletePatternsOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "luis/api/v2.0/apps/{appId}/versions/{versionId}/patternrules",
  urlParameters: [
    Parameters.azureRegion,
    Parameters.appId,
    Parameters.versionId0
  ],
  requestBody: {
    parameterPath: "patternIds",
    mapper: {
      required: true,
      serializedName: "patternIds",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Uuid"
          }
        }
      }
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updatePatternOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "luis/api/v2.0/apps/{appId}/versions/{versionId}/patternrules/{patternId}",
  urlParameters: [
    Parameters.azureRegion,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.patternId1
  ],
  requestBody: {
    parameterPath: "pattern",
    mapper: {
      ...Mappers.PatternRuleUpdateObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PatternRuleInfo
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deletePatternOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "luis/api/v2.0/apps/{appId}/versions/{versionId}/patternrules/{patternId}",
  urlParameters: [
    Parameters.azureRegion,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.patternId1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getIntentPatternsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "luis/api/v2.0/apps/{appId}/versions/{versionId}/intents/{intentId}/patternrules",
  urlParameters: [
    Parameters.azureRegion,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.intentId
  ],
  queryParameters: [
    Parameters.skip,
    Parameters.take
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PatternRuleInfo"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
