"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const msRest = require("ms-rest-js");
const Mappers = require("../models/versionsMappers");
const Parameters = require("../models/parameters");
/** Class representing a Versions. */
class Versions {
    /**
     * Create a Versions.
     * @param {LuisAuthoringContext} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Creates a new version using the current snapshot of the selected application version.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {TaskUpdateObject} versionCloneObject A model containing the new version ID.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    cloneWithHttpOperationResponse(azureRegion, appId, versionId, versionCloneObject, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            appId,
            versionId,
            versionCloneObject,
            options
        }, cloneOperationSpec);
    }
    /**
     * Gets the application versions info.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {VersionsListOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    listWithHttpOperationResponse(azureRegion, appId, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            appId,
            options
        }, listOperationSpec);
    }
    /**
     * Gets the version info.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    getWithHttpOperationResponse(azureRegion, appId, versionId, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            appId,
            versionId,
            options
        }, getOperationSpec);
    }
    /**
     * Updates the name or description of the application version.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {TaskUpdateObject} versionUpdateObject A model containing Name and Description of the
     * application.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    updateWithHttpOperationResponse(azureRegion, appId, versionId, versionUpdateObject, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            appId,
            versionId,
            versionUpdateObject,
            options
        }, updateOperationSpec);
    }
    /**
     * Deletes an application version.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    deleteMethodWithHttpOperationResponse(azureRegion, appId, versionId, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            appId,
            versionId,
            options
        }, deleteMethodOperationSpec);
    }
    /**
     * Exports a LUIS application to JSON format.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    exportMethodWithHttpOperationResponse(azureRegion, appId, versionId, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            appId,
            versionId,
            options
        }, exportMethodOperationSpec);
    }
    /**
     * Imports a new version into a LUIS application.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {LuisApp} luisApp A LUIS application structure.
     *
     * @param {VersionsImportMethodOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    importMethodWithHttpOperationResponse(azureRegion, appId, luisApp, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            appId,
            luisApp,
            options
        }, importMethodOperationSpec);
    }
    /**
     * Deleted an unlabelled utterance.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {string} utterance The utterance text to delete.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    deleteUnlabelledUtteranceWithHttpOperationResponse(azureRegion, appId, versionId, utterance, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            appId,
            versionId,
            utterance,
            options
        }, deleteUnlabelledUtteranceOperationSpec);
    }
    clone(azureRegion, appId, versionId, versionCloneObject, options, callback) {
        return msRest.responseToBody(this.cloneWithHttpOperationResponse.bind(this), azureRegion, appId, versionId, versionCloneObject, options, callback);
    }
    list(azureRegion, appId, options, callback) {
        return msRest.responseToBody(this.listWithHttpOperationResponse.bind(this), azureRegion, appId, options, callback);
    }
    get(azureRegion, appId, versionId, options, callback) {
        return msRest.responseToBody(this.getWithHttpOperationResponse.bind(this), azureRegion, appId, versionId, options, callback);
    }
    update(azureRegion, appId, versionId, versionUpdateObject, options, callback) {
        return msRest.responseToBody(this.updateWithHttpOperationResponse.bind(this), azureRegion, appId, versionId, versionUpdateObject, options, callback);
    }
    deleteMethod(azureRegion, appId, versionId, options, callback) {
        return msRest.responseToBody(this.deleteMethodWithHttpOperationResponse.bind(this), azureRegion, appId, versionId, options, callback);
    }
    exportMethod(azureRegion, appId, versionId, options, callback) {
        return msRest.responseToBody(this.exportMethodWithHttpOperationResponse.bind(this), azureRegion, appId, versionId, options, callback);
    }
    importMethod(azureRegion, appId, luisApp, options, callback) {
        return msRest.responseToBody(this.importMethodWithHttpOperationResponse.bind(this), azureRegion, appId, luisApp, options, callback);
    }
    deleteUnlabelledUtterance(azureRegion, appId, versionId, utterance, options, callback) {
        return msRest.responseToBody(this.deleteUnlabelledUtteranceWithHttpOperationResponse.bind(this), azureRegion, appId, versionId, utterance, options, callback);
    }
}
exports.Versions = Versions;
// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const cloneOperationSpec = {
    httpMethod: "POST",
    path: "luis/api/v2.0/apps/{appId}/versions/{versionId}/clone",
    urlParameters: [
        Parameters.azureRegion,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "versionCloneObject",
        mapper: Object.assign({}, Mappers.TaskUpdateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "String"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listOperationSpec = {
    httpMethod: "GET",
    path: "luis/api/v2.0/apps/{appId}/versions",
    urlParameters: [
        Parameters.azureRegion,
        Parameters.appId
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VersionInfo"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getOperationSpec = {
    httpMethod: "GET",
    path: "luis/api/v2.0/apps/{appId}/versions/{versionId}/",
    urlParameters: [
        Parameters.azureRegion,
        Parameters.appId,
        Parameters.versionId0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VersionInfo
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updateOperationSpec = {
    httpMethod: "PUT",
    path: "luis/api/v2.0/apps/{appId}/versions/{versionId}/",
    urlParameters: [
        Parameters.azureRegion,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "versionUpdateObject",
        mapper: Object.assign({}, Mappers.TaskUpdateObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "luis/api/v2.0/apps/{appId}/versions/{versionId}/",
    urlParameters: [
        Parameters.azureRegion,
        Parameters.appId,
        Parameters.versionId0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const exportMethodOperationSpec = {
    httpMethod: "GET",
    path: "luis/api/v2.0/apps/{appId}/versions/{versionId}/export",
    urlParameters: [
        Parameters.azureRegion,
        Parameters.appId,
        Parameters.versionId0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.LuisApp
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const importMethodOperationSpec = {
    httpMethod: "POST",
    path: "luis/api/v2.0/apps/{appId}/versions/import",
    urlParameters: [
        Parameters.azureRegion,
        Parameters.appId
    ],
    queryParameters: [
        Parameters.versionId1
    ],
    requestBody: {
        parameterPath: "luisApp",
        mapper: Object.assign({}, Mappers.LuisApp, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "String"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deleteUnlabelledUtteranceOperationSpec = {
    httpMethod: "DELETE",
    path: "luis/api/v2.0/apps/{appId}/versions/{versionId}/suggest",
    urlParameters: [
        Parameters.azureRegion,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "utterance",
        mapper: {
            required: true,
            serializedName: "utterance",
            type: {
                name: "String"
            }
        }
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
//# sourceMappingURL=versions.js.map