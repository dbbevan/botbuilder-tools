"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const msRest = require("ms-rest-js");
const Mappers = require("../models/appsMappers");
const Parameters = require("../models/parameters");
/** Class representing a Apps. */
class Apps {
    /**
     * Create a Apps.
     * @param {LuisAuthoringContext} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Creates a new LUIS app.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {ApplicationCreateObject} applicationCreateObject A model containing Name, Description
     * (optional), Culture, Usage Scenario (optional), Domain (optional) and initial version ID
     * (optional) of the application. Default value for the version ID is 0.1. Note: the culture cannot
     * be changed after the app is created.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    addWithHttpOperationResponse(azureRegion, applicationCreateObject, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            applicationCreateObject,
            options
        }, addOperationSpec);
    }
    /**
     * Lists all of the user applications.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {AppsListOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    listWithHttpOperationResponse(azureRegion, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            options
        }, listOperationSpec);
    }
    /**
     * Imports an application to LUIS, the application's structure should be included in in the request
     * body.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {LuisApp} luisApp A LUIS application structure.
     *
     * @param {AppsImportMethodOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    importMethodWithHttpOperationResponse(azureRegion, luisApp, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            luisApp,
            options
        }, importMethodOperationSpec);
    }
    /**
     * Gets the endpoint URLs for the prebuilt Cortana applications.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    listCortanaEndpointsWithHttpOperationResponse(azureRegion, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            options
        }, listCortanaEndpointsOperationSpec);
    }
    /**
     * Gets the available application domains.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    listDomainsWithHttpOperationResponse(azureRegion, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            options
        }, listDomainsOperationSpec);
    }
    /**
     * Gets the application available usage scenarios.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    listUsageScenariosWithHttpOperationResponse(azureRegion, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            options
        }, listUsageScenariosOperationSpec);
    }
    /**
     * Gets the supported application cultures.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    listSupportedCulturesWithHttpOperationResponse(azureRegion, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            options
        }, listSupportedCulturesOperationSpec);
    }
    /**
     * Gets the query logs of the past month for the application.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    downloadQueryLogsWithHttpOperationResponse(azureRegion, appId, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            appId,
            options
        }, downloadQueryLogsOperationSpec);
    }
    /**
     * Gets the application info.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    getWithHttpOperationResponse(azureRegion, appId, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            appId,
            options
        }, getOperationSpec);
    }
    /**
     * Updates the name or description of the application.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {ApplicationUpdateObject} applicationUpdateObject A model containing Name and Description
     * of the application.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    updateWithHttpOperationResponse(azureRegion, appId, applicationUpdateObject, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            appId,
            applicationUpdateObject,
            options
        }, updateOperationSpec);
    }
    /**
     * Deletes an application.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    deleteMethodWithHttpOperationResponse(azureRegion, appId, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            appId,
            options
        }, deleteMethodOperationSpec);
    }
    /**
     * Publishes a specific version of the application.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {ApplicationPublishObject} applicationPublishObject The application publish object. The
     * region is the target region that the application is published to.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    publishWithHttpOperationResponse(azureRegion, appId, applicationPublishObject, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            appId,
            applicationPublishObject,
            options
        }, publishOperationSpec);
    }
    /**
     * Get the application settings.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    getSettingsWithHttpOperationResponse(azureRegion, appId, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            appId,
            options
        }, getSettingsOperationSpec);
    }
    /**
     * Updates the application settings.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {ApplicationSettingUpdateObject} applicationSettingUpdateObject An object containing the
     * new application settings.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    updateSettingsWithHttpOperationResponse(azureRegion, appId, applicationSettingUpdateObject, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            appId,
            applicationSettingUpdateObject,
            options
        }, updateSettingsOperationSpec);
    }
    /**
     * Get the application publish settings.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    getPublishSettingsWithHttpOperationResponse(azureRegion, appId, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            appId,
            options
        }, getPublishSettingsOperationSpec);
    }
    /**
     * Updates the application publish settings.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {PublishSettingUpdateObject} publishSettingUpdateObject An object containing the new
     * publish application settings.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    updatePublishSettingsWithHttpOperationResponse(azureRegion, appId, publishSettingUpdateObject, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            appId,
            publishSettingUpdateObject,
            options
        }, updatePublishSettingsOperationSpec);
    }
    /**
     * Returns the available endpoint deployment regions and URLs.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    listEndpointsWithHttpOperationResponse(azureRegion, appId, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            appId,
            options
        }, listEndpointsOperationSpec);
    }
    /**
     * Gets all the available custom prebuilt domains for all cultures.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    listAvailableCustomPrebuiltDomainsWithHttpOperationResponse(azureRegion, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            options
        }, listAvailableCustomPrebuiltDomainsOperationSpec);
    }
    /**
     * Adds a prebuilt domain along with its models as a new application.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {PrebuiltDomainCreateObject} prebuiltDomainCreateObject A prebuilt domain create object
     * containing the name and culture of the domain.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    addCustomPrebuiltDomainWithHttpOperationResponse(azureRegion, prebuiltDomainCreateObject, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            prebuiltDomainCreateObject,
            options
        }, addCustomPrebuiltDomainOperationSpec);
    }
    /**
     * Gets all the available custom prebuilt domains for a specific culture.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
     * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
     * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} culture Culture.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    listAvailableCustomPrebuiltDomainsForCultureWithHttpOperationResponse(azureRegion, culture, options) {
        return this.client.sendOperationRequest({
            azureRegion,
            culture,
            options
        }, listAvailableCustomPrebuiltDomainsForCultureOperationSpec);
    }
    add(azureRegion, applicationCreateObject, options, callback) {
        return msRest.responseToBody(this.addWithHttpOperationResponse.bind(this), azureRegion, applicationCreateObject, options, callback);
    }
    list(azureRegion, options, callback) {
        return msRest.responseToBody(this.listWithHttpOperationResponse.bind(this), azureRegion, options, callback);
    }
    importMethod(azureRegion, luisApp, options, callback) {
        return msRest.responseToBody(this.importMethodWithHttpOperationResponse.bind(this), azureRegion, luisApp, options, callback);
    }
    listCortanaEndpoints(azureRegion, options, callback) {
        return msRest.responseToBody(this.listCortanaEndpointsWithHttpOperationResponse.bind(this), azureRegion, options, callback);
    }
    listDomains(azureRegion, options, callback) {
        return msRest.responseToBody(this.listDomainsWithHttpOperationResponse.bind(this), azureRegion, options, callback);
    }
    listUsageScenarios(azureRegion, options, callback) {
        return msRest.responseToBody(this.listUsageScenariosWithHttpOperationResponse.bind(this), azureRegion, options, callback);
    }
    listSupportedCultures(azureRegion, options, callback) {
        return msRest.responseToBody(this.listSupportedCulturesWithHttpOperationResponse.bind(this), azureRegion, options, callback);
    }
    get(azureRegion, appId, options, callback) {
        return msRest.responseToBody(this.getWithHttpOperationResponse.bind(this), azureRegion, appId, options, callback);
    }
    update(azureRegion, appId, applicationUpdateObject, options, callback) {
        return msRest.responseToBody(this.updateWithHttpOperationResponse.bind(this), azureRegion, appId, applicationUpdateObject, options, callback);
    }
    deleteMethod(azureRegion, appId, options, callback) {
        return msRest.responseToBody(this.deleteMethodWithHttpOperationResponse.bind(this), azureRegion, appId, options, callback);
    }
    publish(azureRegion, appId, applicationPublishObject, options, callback) {
        return msRest.responseToBody(this.publishWithHttpOperationResponse.bind(this), azureRegion, appId, applicationPublishObject, options, callback);
    }
    getSettings(azureRegion, appId, options, callback) {
        return msRest.responseToBody(this.getSettingsWithHttpOperationResponse.bind(this), azureRegion, appId, options, callback);
    }
    updateSettings(azureRegion, appId, applicationSettingUpdateObject, options, callback) {
        return msRest.responseToBody(this.updateSettingsWithHttpOperationResponse.bind(this), azureRegion, appId, applicationSettingUpdateObject, options, callback);
    }
    getPublishSettings(azureRegion, appId, options, callback) {
        return msRest.responseToBody(this.getPublishSettingsWithHttpOperationResponse.bind(this), azureRegion, appId, options, callback);
    }
    updatePublishSettings(azureRegion, appId, publishSettingUpdateObject, options, callback) {
        return msRest.responseToBody(this.updatePublishSettingsWithHttpOperationResponse.bind(this), azureRegion, appId, publishSettingUpdateObject, options, callback);
    }
    listEndpoints(azureRegion, appId, options, callback) {
        return msRest.responseToBody(this.listEndpointsWithHttpOperationResponse.bind(this), azureRegion, appId, options, callback);
    }
    listAvailableCustomPrebuiltDomains(azureRegion, options, callback) {
        return msRest.responseToBody(this.listAvailableCustomPrebuiltDomainsWithHttpOperationResponse.bind(this), azureRegion, options, callback);
    }
    addCustomPrebuiltDomain(azureRegion, prebuiltDomainCreateObject, options, callback) {
        return msRest.responseToBody(this.addCustomPrebuiltDomainWithHttpOperationResponse.bind(this), azureRegion, prebuiltDomainCreateObject, options, callback);
    }
    listAvailableCustomPrebuiltDomainsForCulture(azureRegion, culture, options, callback) {
        return msRest.responseToBody(this.listAvailableCustomPrebuiltDomainsForCultureWithHttpOperationResponse.bind(this), azureRegion, culture, options, callback);
    }
}
exports.Apps = Apps;
// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const addOperationSpec = {
    httpMethod: "POST",
    path: "luis/api/v2.0/apps/",
    urlParameters: [
        Parameters.azureRegion
    ],
    requestBody: {
        parameterPath: "applicationCreateObject",
        mapper: Object.assign({}, Mappers.ApplicationCreateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listOperationSpec = {
    httpMethod: "GET",
    path: "luis/api/v2.0/apps/",
    urlParameters: [
        Parameters.azureRegion
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApplicationInfoResponse"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const importMethodOperationSpec = {
    httpMethod: "POST",
    path: "luis/api/v2.0/apps/import",
    urlParameters: [
        Parameters.azureRegion
    ],
    queryParameters: [
        Parameters.appName
    ],
    requestBody: {
        parameterPath: "luisApp",
        mapper: Object.assign({}, Mappers.LuisApp, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listCortanaEndpointsOperationSpec = {
    httpMethod: "GET",
    path: "luis/api/v2.0/apps/assistants",
    urlParameters: [
        Parameters.azureRegion
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PersonalAssistantsResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listDomainsOperationSpec = {
    httpMethod: "GET",
    path: "luis/api/v2.0/apps/domains",
    urlParameters: [
        Parameters.azureRegion
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listUsageScenariosOperationSpec = {
    httpMethod: "GET",
    path: "luis/api/v2.0/apps/usagescenarios",
    urlParameters: [
        Parameters.azureRegion
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listSupportedCulturesOperationSpec = {
    httpMethod: "GET",
    path: "luis/api/v2.0/apps/cultures",
    urlParameters: [
        Parameters.azureRegion
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AvailableCulture"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const downloadQueryLogsOperationSpec = {
    httpMethod: "GET",
    path: "luis/api/v2.0/apps/{appId}/querylogs",
    urlParameters: [
        Parameters.azureRegion,
        Parameters.appId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            }
        },
        default: {}
    },
    serializer
};
const getOperationSpec = {
    httpMethod: "GET",
    path: "luis/api/v2.0/apps/{appId}",
    urlParameters: [
        Parameters.azureRegion,
        Parameters.appId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ApplicationInfoResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updateOperationSpec = {
    httpMethod: "PUT",
    path: "luis/api/v2.0/apps/{appId}",
    urlParameters: [
        Parameters.azureRegion,
        Parameters.appId
    ],
    requestBody: {
        parameterPath: "applicationUpdateObject",
        mapper: Object.assign({}, Mappers.ApplicationUpdateObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "luis/api/v2.0/apps/{appId}",
    urlParameters: [
        Parameters.azureRegion,
        Parameters.appId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const publishOperationSpec = {
    httpMethod: "POST",
    path: "luis/api/v2.0/apps/{appId}/publish",
    urlParameters: [
        Parameters.azureRegion,
        Parameters.appId
    ],
    requestBody: {
        parameterPath: "applicationPublishObject",
        mapper: Object.assign({}, Mappers.ApplicationPublishObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.ProductionOrStagingEndpointInfo
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getSettingsOperationSpec = {
    httpMethod: "GET",
    path: "luis/api/v2.0/apps/{appId}/settings",
    urlParameters: [
        Parameters.azureRegion,
        Parameters.appId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ApplicationSettings
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updateSettingsOperationSpec = {
    httpMethod: "PUT",
    path: "luis/api/v2.0/apps/{appId}/settings",
    urlParameters: [
        Parameters.azureRegion,
        Parameters.appId
    ],
    requestBody: {
        parameterPath: "applicationSettingUpdateObject",
        mapper: Object.assign({}, Mappers.ApplicationSettingUpdateObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getPublishSettingsOperationSpec = {
    httpMethod: "GET",
    path: "luis/api/v2.0/apps/{appId}/publishsettings",
    urlParameters: [
        Parameters.azureRegion,
        Parameters.appId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PublishSettings
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updatePublishSettingsOperationSpec = {
    httpMethod: "PUT",
    path: "luis/api/v2.0/apps/{appId}/publishsettings",
    urlParameters: [
        Parameters.azureRegion,
        Parameters.appId
    ],
    requestBody: {
        parameterPath: "publishSettingUpdateObject",
        mapper: Object.assign({}, Mappers.PublishSettingUpdateObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listEndpointsOperationSpec = {
    httpMethod: "GET",
    path: "luis/api/v2.0/apps/{appId}/endpoints",
    urlParameters: [
        Parameters.azureRegion,
        Parameters.appId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listAvailableCustomPrebuiltDomainsOperationSpec = {
    httpMethod: "GET",
    path: "luis/api/v2.0/apps/customprebuiltdomains",
    urlParameters: [
        Parameters.azureRegion
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrebuiltDomain"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const addCustomPrebuiltDomainOperationSpec = {
    httpMethod: "POST",
    path: "luis/api/v2.0/apps/customprebuiltdomains",
    urlParameters: [
        Parameters.azureRegion
    ],
    requestBody: {
        parameterPath: "prebuiltDomainCreateObject",
        mapper: Object.assign({}, Mappers.PrebuiltDomainCreateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listAvailableCustomPrebuiltDomainsForCultureOperationSpec = {
    httpMethod: "GET",
    path: "luis/api/v2.0/apps/customprebuiltdomains/{culture}",
    urlParameters: [
        Parameters.azureRegion,
        Parameters.culture
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrebuiltDomain"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
//# sourceMappingURL=apps.js.map